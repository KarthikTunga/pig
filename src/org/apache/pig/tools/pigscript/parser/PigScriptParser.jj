/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Grammar for PigScript

options {
  // Generate non-static functions
  STATIC = false;
  // Case is ignored in keywords
  IGNORE_CASE = true;
}

PARSER_BEGIN(PigScriptParser)
package org.apache.pig.tools.pigscript.parser;

import java.io.IOException;

public abstract class PigScriptParser
{
	protected boolean mInteractive;

	public void setInteractive(boolean interactive)
	{
		mInteractive = interactive;
		token_source.interactive = interactive;
	}
	
	abstract public void prompt();
	
	abstract protected void quit();
	
	abstract protected void processRegisterFunc(String name, String expr);
	
	abstract protected void processDescribe(String alias) throws IOException;
	
	abstract protected void processRegister(String jar) throws IOException;

	abstract protected void processSet(String key, String value) throws IOException, ParseException;
	
	abstract protected void processStore(String alias, String file, String func) throws IOException;
		
	abstract protected void processCat(String path) throws IOException;

	abstract protected void processCD(String path) throws IOException;

	abstract protected void processDump(String alias) throws IOException;

	abstract protected void processKill(String jobid) throws IOException;

	abstract protected void processLS(String path) throws IOException;
	
	abstract protected void processPWD() throws IOException;

	abstract protected void printHelp();

	abstract protected void processMove(String src, String dst) throws IOException;

	abstract protected void processCopy(String src, String dst) throws IOException;

	abstract protected void processCopyToLocal(String src, String dst) throws IOException;

	abstract protected void processCopyFromLocal(String src, String dst) throws IOException;
	
	abstract protected void processMkdir(String dir) throws IOException;
	
	abstract protected void processPig(String cmd) throws IOException;

	abstract protected void processRemove(String path) throws IOException;

	 static String unquote(String s)
	{
		if (s.charAt(0) == '\'' && s.charAt(s.length()-1) == '\'')
			return s.substring(1, s.length()-1);
		else
			return s;
	}

}
PARSER_END(PigScriptParser)

// Skip all tabs and spaces
SKIP : { " " |  "\t" }

// Skip comments(single line and multiline)
SKIP : {
   <"--"(~["\r","\n"])*>
|  <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

// tokens

// commands
TOKEN: {<CAT: "cat">}
TOKEN: {<CD: "cd">}
TOKEN: {<COPY: "cp">}
TOKEN: {<COPYFROMLOCAL: "copyFromLocal">}
TOKEN: {<COPYTOLOCAL: "copyToLocal">}
TOKEN: {<DEFINE: "define">}
TOKEN: {<DUMP: "dump">}
TOKEN: {<DESCRIBE: "describe">}
TOKEN: {<HELP: "help">}
TOKEN: {<KILL: "kill">}
TOKEN: {<LS: "ls">}
TOKEN: {<MOVE: "mv">}
TOKEN: {<MKDIR: "mkdir">}
TOKEN: {<PWD: "pwd">}
TOKEN: {<QUIT: "quit">}
TOKEN: {<REGISTER: "register">}
TOKEN: {<REMOVE: "rm">}
TOKEN: {<SET: "set">}
TOKEN: {<STORE: "store">}
TOKEN: {<INTO: "into">}
TOKEN: {<USING: "using">}

// internal use commands
TOKEN: {<SCRIPT_DONE: "scriptDone">}

// Define pig command as 
// (1) Starting with "split" or assignment (A=) followed by
// (2) Single statement followed by ; and newline or
// (3) Block of statements enclosed in

TOKEN_MGR_DECLS : {
        int pigBlockLevel = 0;
        int funcBlockLevel = 0;
	int prevState = DEFAULT;
	boolean interactive = false;
	public void secondary_prompt()
	{
		if (interactive)
		{
			System.err.print(">> ");
			System.err.flush();
		}
	}

}

<DEFAULT> MORE :
{
	<"split"> : PIG_START
| 	<"("> : FUNC_ARGS_START
| 	<(["a"-"z", "A"-"Z"])+(["a"-"z", "A"-"Z"] | ["0"-"9"] | "_")*(" " | "\t")*"="> : PIG_START
}

<PIG_START> MORE :
{
	<"'"> {prevState = PIG_START;} : IN_STRING
|       <"{"> {pigBlockLevel = 1;} : IN_BLOCK
|       <"}"> {if (true) throw new TokenMgrError("Unmatched '}'", TokenMgrError.LEXICAL_ERROR);}
|       <";"> : PIG_END
|	<"--"> {prevState = PIG_START;} : SINGLE_LINE_COMMENT
|	<"/*"> {prevState = PIG_START;} : MULTI_LINE_COMMENT
|	<("\n" | "\r" | "\r\n")> {secondary_prompt();}
|       <(~[])>
}

<SINGLE_LINE_COMMENT> MORE :
{
	<("\n" | "\r" | "\r\n")> {SwitchTo(prevState); if(prevState != DEFAULT) secondary_prompt();}
|       <(~[])>
}

<MULTI_LINE_COMMENT> MORE :
{
	<"*/"> {SwitchTo(prevState);}
|	<("\n" | "\r" | "\r\n")> {secondary_prompt();}
|       <(~[])>
}

<IN_STRING> MORE :
{
	<"'"> { SwitchTo(prevState);}
|	<("\n" | "\r" | "\r\n")> {secondary_prompt();}
|	<(~[])>
}

<IN_BLOCK> MORE :
{
	<"\""> {prevState = IN_BLOCK;} : IN_STRING
|	<"{"> {pigBlockLevel++;}
|       <"}"(";")?> {pigBlockLevel--; if (pigBlockLevel == 0) SwitchTo(PIG_END);}
|	<"'"> {prevState = IN_BLOCK;} : IN_STRING
|	<"--"> {prevState = IN_BLOCK;} : SINGLE_LINE_COMMENT
|	<"/*"> {prevState = IN_BLOCK;} : MULTI_LINE_COMMENT
|	<("\n" | "\r" | "\r\n")> {secondary_prompt();}
|       <(~[])>
}

<PIG_END> TOKEN :
{
        <PIG: ""> { 	matchedToken.image = image.toString();
			//System.out.println("image = " +  matchedToken.image);
		}: DEFAULT
}

<FUNC_ARGS_START> MORE :
{
	<"("> {funcBlockLevel = 1;} : IN_ARG_BLOCK
|	<")"> : FUNC_ARGS_END
|	<(~[])>
}

<IN_ARG_BLOCK> MORE:
{
        <"("> {funcBlockLevel++;}
|       <")"> {funcBlockLevel--; if (funcBlockLevel == 0) SwitchTo(FUNC_ARGS_END);}
|       <(~[])>
}

<FUNC_ARGS_END> TOKEN :
{
        <FUNC_ARGS: ""> {matchedToken.image = image.toString();}: DEFAULT
}

// other
TOKEN: {<EOL:  "\r" | "\n" | "\r\n">}
TOKEN: {<QUOTE: "'">}
TOKEN: {<SEMICOLON: ";">}
TOKEN:
{
	<#LETTER : ["a"-"z", "A"-"Z"] >
|	<#DIGIT : ["0"-"9"] >
|	<#SPECIALCHAR : ["_"] >
|	<#FSSPECIALCHAR: ["/"]>
|       <#FLOAT: <INTEGER> ( "." <INTEGER> )? | "." <INTEGER> >
|       <#INTEGER: ( <DIGIT> )+ >
|	<#NUMBER: <INTEGER> | <FLOAT> | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?>
}

TOKEN: {<IDENTIFIER: (<LETTER>)+(<DIGIT> | <LETTER> | <SPECIALCHAR>)*>}
TOKEN: {<PATH: (~["(", ")", ";", "\r", " ", "\t", "\n"])+>}
TOKEN : { <QUOTEDSTRING : "'" (~["'"])* "'"> }
void parse() throws IOException:
{
	Token t1, t2;
	String val = null;
}

{
	(	
	<EOL>
	{prompt();}
	|
	<CAT>
	(
	t1 = GetPath()
	{processCat(t1.image);}		
	)+
	|
	<CD>
	(
		t1 = GetPath()
		{processCD(t1.image);}
		|
		{processCD(null);}
	)
	|
	<COPY>
	t1 = GetPath()
	t2 = GetPath()
	{processCopy(t1.image, t2.image);}
	|
	<COPYFROMLOCAL>
	t1 = GetPath()
	t2 = GetPath()
	{processCopyFromLocal(t1.image, t2.image);}	
	|
	<COPYTOLOCAL>
	t1 = GetPath()
	t2 = GetPath()
	{processCopyToLocal(t1.image, t2.image);}	
	|
	<DEFINE>
	t1 = <IDENTIFIER>
	(
	val = QualifiedFunction()
	)
	{processRegisterFunc(t1.image, val);}
	|
	<DUMP>
	t1 = <IDENTIFIER>
	{processDump(t1.image);}
	|
	<DESCRIBE>
	t1 = <IDENTIFIER>
	{processDescribe(t1.image);}
	|
	<HELP>
	{printHelp();}
	|
	<KILL>
	t1 = <IDENTIFIER>	
	{processKill(t1.image);}
	|
	<LS>
	(
		t1 = GetPath()
		{processLS(t1.image);}
		|
		{processLS(null);}
	)
	|
	<MOVE>
	t1 = GetPath()
	t2 = GetPath()
	{processMove(t1.image, t2.image);}
	|
	<MKDIR>
	t1 = GetPath()
	{processMkdir(t1.image);}
	|
	t1 = <PIG>
	{processPig(t1.image);}
	|
	<PWD>
	{processPWD();}
	|
	<QUIT>
	{quit();}
	|
	<REGISTER>
	t1 = GetPath()
	{processRegister(t1.image);}
	|
	<REMOVE>
	(
		t1 = GetPath()
		{processRemove(t1.image);}
	)+	
	|
	<SCRIPT_DONE>
	{quit();}
	|
	<SET>
	(
		t1 = GetKey()
		t2 = GetValue()
		{processSet(t1.image, t2.image);}
	)
	|
	<STORE>
	t1 = <IDENTIFIER>
	<INTO>
	t2 = GetPath()
	(
		<USING>
		val = QualifiedFunction()
	)?
	{processStore(t1.image, unquote(t2.image), val);}
	|
	<EOF>
	{quit();}
	|
	<SEMICOLON>
	{}
	|
	// handle invalid token
	skip_invalid_command(EOL)
	{prompt();}
	)
}

String QualifiedFunction()       : {Token t1;StringBuffer s=new StringBuffer();}
{
	t1 = GetPath()
	{s.append(t1.image);}
	(
		t1 = <FUNC_ARGS>
		{s.append(t1.image);}
	)*
        {return s.toString();}
}

Token GetPath() :
{
	Token t;
}
{
	(
	t = <IDENTIFIER>
	|
        t = <PATH>
	|
	t = GetReserved()
	)
	{return t;}
}

Token GetKey() :
{	
	Token t;
}
{
	t = GetPath()
	{return t;}
}

Token GetValue() :
{
	Token t;
}
{
	(
	t = GetPath()
	|
	t = <QUOTEDSTRING>
	)

	{return t;}
}

Token GetReserved () :
{
	Token t;
}
{
	(
	t = <CAT>
	|
	t = <CD>
	|
	t = <COPY>
	|
	t = <COPYFROMLOCAL>
	|
	t = <COPYTOLOCAL>
	|
	t = <DEFINE>
	|
	t = <DUMP>
	|
	t = <DESCRIBE>
	|
	t = <HELP>
	|
	t = <KILL>
	|
	t = <LS>
	|
	t = <MOVE>
	|
	t = <MKDIR>
	|
	t = <PWD>
	|
	t = <QUIT>
	|
	t = <REGISTER>
	|
	t = <REMOVE>
	|
	t = <SET>
	|
	t = <STORE>
	|
	t = <INTO>
	|
	t = <USING>
	|
	t = <SCRIPT_DONE>
	)

	{return t;}
}


JAVACODE 
void skip_invalid_command(int kind) 
{
	ParseException e = generateParseException();  // generate the exception object.
	System.out.println(e.toString());  // print the error message
	Token t = getNextToken();

	while (t.kind != kind)
		t = getNextToken();
}
